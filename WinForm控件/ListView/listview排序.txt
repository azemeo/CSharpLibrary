How to Build the Sample Project
1.Create a new Visual C# .NET Windows application project. Form1 is created by default.
2.Add a ListView control to Form1. Size the form to be several inches wide by several inches tall.
3.Paste the following code into the class for the form:
private ListViewColumnSorter lvwColumnSorter;
					
4.Paste the following code into the constructor for the form, after the call to the InitializeComponent method:
// Create an instance of a ListView column sorter and assign it 
// to the ListView control.
lvwColumnSorter = new ListViewColumnSorter();
this.listView1.ListViewItemSorter = lvwColumnSorter;
					
5.Paste the following code into the Load event for the form:
ColumnHeader columnheader;		// Used for creating column headers.
ListViewItem listviewitem;		// Used for creating listview items.

// Ensure that the view is set to show details.
listView1.View = View.Details;

// Create some listview items consisting of first and last names.
listviewitem = new ListViewItem("John");
listviewitem.SubItems.Add("Smith");
this.listView1.Items.Add(listviewitem);

listviewitem = new ListViewItem("Bob");
listviewitem.SubItems.Add("Taylor");
this.listView1.Items.Add(listviewitem);

listviewitem = new ListViewItem("Kim");
listviewitem.SubItems.Add("Zimmerman");
this.listView1.Items.Add(listviewitem);

listviewitem = new ListViewItem("Olivia");
listviewitem.SubItems.Add("Johnson");
this.listView1.Items.Add(listviewitem);
			            
// Create some column headers for the data. 
columnheader = new ColumnHeader();
columnheader.Text = "First Name";
this.listView1.Columns.Add(columnheader);

columnheader = new ColumnHeader();
columnheader.Text = "Last Name";
this.listView1.Columns.Add(columnheader);

// Loop through and size each column header to fit the column header text.
foreach (ColumnHeader ch in this.listView1.Columns)
{			
	ch.Width = -2;
}
					
6.Paste the following code into the ColumnClick event for the ListView control:
// Determine if clicked column is already the column that is being sorted.
if ( e.Column == lvwColumnSorter.SortColumn )
{
	// Reverse the current sort direction for this column.
	if (lvwColumnSorter.Order == SortOrder.Ascending)
	{
		lvwColumnSorter.Order = SortOrder.Descending;
	}
	else
	{
		lvwColumnSorter.Order = SortOrder.Ascending;
	}
}
else
{
	// Set the column number that is to be sorted; default to ascending.
	lvwColumnSorter.SortColumn = e.Column;
	lvwColumnSorter.Order = SortOrder.Ascending;
}

// Perform the sort with these new sort options.
this.listView1.Sort();
					
7.On the Project menu, click Add Class to add a new class to the project.
8.Replace all of the default code in the new class with the following code:
using System.Collections;	
using System.Windows.Forms;

/// <summary>
/// This class is an implementation of the 'IComparer' interface.
/// </summary>
public class ListViewColumnSorter : IComparer
{
	/// <summary>
	/// Specifies the column to be sorted
	/// </summary>
	private int ColumnToSort;
	/// <summary>
	/// Specifies the order in which to sort (i.e. 'Ascending').
	/// </summary>
	private SortOrder OrderOfSort;
	/// <summary>
	/// Case insensitive comparer object
	/// </summary>
	private CaseInsensitiveComparer ObjectCompare;

	/// <summary>
	/// Class constructor.  Initializes various elements
	/// </summary>
	public ListViewColumnSorter()
	{
		// Initialize the column to '0'
		ColumnToSort = 0;

		// Initialize the sort order to 'none'
		OrderOfSort = SortOrder.None;

		// Initialize the CaseInsensitiveComparer object
		ObjectCompare = new CaseInsensitiveComparer();
	}

	/// <summary>
	/// This method is inherited from the IComparer interface.  It compares the two objects passed using a case insensitive comparison.
	/// </summary>
	/// <param name="x">First object to be compared</param>
	/// <param name="y">Second object to be compared</param>
	/// <returns>The result of the comparison. "0" if equal, negative if 'x' is less than 'y' and positive if 'x' is greater than 'y'</returns>
	public int Compare(object x, object y)
	{
		int compareResult;
		ListViewItem listviewX, listviewY;

		// Cast the objects to be compared to ListViewItem objects
		listviewX = (ListViewItem)x;
		listviewY = (ListViewItem)y;

		// Compare the two items
		compareResult = ObjectCompare.Compare(listviewX.SubItems[ColumnToSort].Text,listviewY.SubItems[ColumnToSort].Text);
			
		// Calculate correct return value based on object comparison
		if (OrderOfSort == SortOrder.Ascending)
		{
			// Ascending sort is selected, return normal result of compare operation
			return compareResult;
		}
		else if (OrderOfSort == SortOrder.Descending)
		{
			// Descending sort is selected, return negative result of compare operation
			return (-compareResult);
		}
		else
		{
			// Return '0' to indicate they are equal
			return 0;
		}
	}
    
	/// <summary>
	/// Gets or sets the number of the column to which to apply the sorting operation (Defaults to '0').
	/// </summary>
	public int SortColumn
	{
		set
		{
			ColumnToSort = value;
		}
		get
		{
			return ColumnToSort;
		}
	}

	/// <summary>
	/// Gets or sets the order of sorting to apply (for example, 'Ascending' or 'Descending').
	/// </summary>
	public SortOrder Order
	{
		set
		{
			OrderOfSort = value;
		}
		get
		{
			return OrderOfSort;
		}
	}
    
}
					
9.Save, build, and then run the sample project.
Click the various column headers in the ListView control. When you click the header, the contents of the ListView control are sorted in ascending order based on the column that you click. When you click the same column header again, that column is sorted in descending order.
