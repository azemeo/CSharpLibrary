数组：一种线形的，可以直接访问的，单一数据结构

在程序编写中，数组是最简单也是最广泛使用的数据结构。在所有的程序语言中数组都具备以下共同的属性：
1．数组的数据存储在一段连续的内存之中；
2．数组的所有元素都必须是同一种数据类型，因此数组又被认为是单一数据结构(homogeneous data structures)；
3．数组元素可以直接访问。

1．分配空间
2．数据访问
3．数组空间重分配

bool [] boolleanArray;//申明
booleanArray = new bool[10];//分配空间
bool b = booleanArray[7];// 读一个数组元素
booleanArray[0] = false;// 写一个数组元素，即赋值


      
重新分配的示例:
	// 创建包含3个元素的int类型数组
      int [] fib = new int[3];
      fib[0] = 1;
      fib[1] = 1;
      fib[2] = 2;      
      // 重新分配数组，长度为10
      int [] temp = new int[10];
      // 将fib数组内容拷贝到临时数组
      fib.CopyTo(temp, 0);      
      // 将临时数组赋给fib
      fib = temp;   
当我们要存储同种类型的数据并仅需要直接访问数据时，数组是较好的数据结构。搜索未排序的数组时间复杂度是线形的。当我们对小型数组进行操作，或很少对它进行查询操作时，数组这种结构是可以接受的.
在n个元素的一维数组中查询操作的时间复杂度为O(n)。对于一个nxn的二维数组，时间复杂度为O(n2)，因为每次搜索都要检查n2个元素。以此类推，k维数组搜索的时间复杂度为O（nk）。






