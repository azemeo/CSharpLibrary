using System;
using System.Drawing;
using System.Collections;
using System.Windows.Forms;
using System.Data;
using System.Runtime.InteropServices;
using System.Text;
using System.Diagnostics;
using System.ComponentModel;


[DllImport("coredll.dll", SetLastError=true)]
		private static extern bool KernelIoControl(Int32 dwIoControlCode, IntPtr lpInBuf, Int32 nInBufSize, byte[] lpOutBuf, Int32 nOutBufSize, ref Int32 lpBytesReturned);
		private static string GetDeviceID()
		{

			string strResult="-1";


			Int32 METHOD_BUFFERED = 0;
			Int32 FILE_ANY_ACCESS = 0;
			Int32 FILE_DEVICE_HAL = 0x00000101;

			Int32 IOCTL_HAL_GET_DEVICEID = ((FILE_DEVICE_HAL) << 16) | ((FILE_ANY_ACCESS) << 14) | ((21) << 2) | (METHOD_BUFFERED);

			byte[] outbuff = new byte[4096];
			Int32  dwOutBytes;
			Int32 nBuffSize = outbuff.Length;			
			BitConverter.GetBytes(nBuffSize).CopyTo(outbuff, 0);  
			dwOutBytes = 0;

						
			if (KernelIoControl(IOCTL_HAL_GET_DEVICEID, IntPtr.Zero, 0, outbuff, nBuffSize, ref dwOutBytes))
			{
				Int32 dwPresetIDOffset = BitConverter.ToInt32(outbuff, 0x4);    // DEVICE_ID.dwPresetIDOffset
				Int32 dwPresetIDSize = BitConverter.ToInt32(outbuff, 0x8);      // DEVICE_ID.dwPresetSize
				Int32 dwPlatformIDOffset = BitConverter.ToInt32(outbuff, 0xc);  // DEVICE_ID.dwPlatformIDOffset
				Int32 dwPlatformIDSize = BitConverter.ToInt32(outbuff, 0x10);   // DEVICE_ID.dwPlatformIDBytes
				StringBuilder sb = new StringBuilder();

				for (int i = dwPresetIDOffset; i < dwPresetIDOffset + dwPresetIDSize; i++)
				{
					sb.Append(String.Format("{0:X2}", outbuff[i]));
				}
				sb.Append("-");
				for (int i = dwPlatformIDOffset; i < dwPlatformIDOffset + dwPlatformIDSize; i ++ )  
				{
					sb.Append( String.Format("{0:X2}", outbuff[i]));

				}
				strResult= sb.ToString();
			}			
			return strResult;			
		}

		private void buttonGet_Click(object sender, System.EventArgs e)
		{
			textBox1.Text=GetDeviceID();
		}