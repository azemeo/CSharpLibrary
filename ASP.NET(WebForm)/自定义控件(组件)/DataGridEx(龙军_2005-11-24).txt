using System;
using System.Data;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.ComponentModel;
using System.Drawing;
using System.Collections;
using System.Collections.Specialized;

namespace ZWWebControls
{
	/// <summary>
	/// 扩展DataGrid
	/// 作者:龙军
	/// </summary>
	//属性面板的默认选中的属性
	[DefaultProperty("DataSource"),
	ToolboxData("<{0}:DataGridEx runat=server></{0}:DataGridEx>")]//在工具箱中应归为Web窗体控件类
	public class DataGridEx : System.Web.UI.WebControls.DataGrid 
	{
		private enum CustomColumnClass //列类别
		{
			SelectColumn,
			AutoNumberColumn
		}
		public enum SelectType //选择控件的类型
		{
			CheckBox,
			RadioButton
		}; 

		private SelectType m_SelectType; //控件类型变量
		private bool m_ShowAutoNumber = false; //显示自动序号列
		private bool m_ShowSelectColumn = false;//显示选择列
		private int m_pageCount;//页数
		

		//private Color m_ItemMouseOverColor = System.Drawing.ColorTranslator.FromHtml("#9CB5F9");//紫蓝色

		private bool m_ShowNoDataDispalyText = false; //是否在没有数据时提示文本
		private string m_NoDataDispalyText = "暂无任何数据！";
	

		//构造函数(初始一些缺省的值)
		public DataGridEx()
		{
			this.AllowPaging = false;
			this.AllowCustomPaging = false;
			this.ShowAutoNumber = false;
			this.ShowSelectControl = false;
			this.ShowSelectType = SelectType.CheckBox;			
		}

		#region 属性

		[Bindable(true),
		Category("Appearance"),
		DefaultValue(""),
		Description("是否显示自动序号列。")]//属性窗体的提示
		public bool ShowAutoNumber
		{
			get
			{
				object o = ViewState["__ShowAutoNumber"];
				if(o == null)
					m_ShowAutoNumber = false;
				else
					m_ShowAutoNumber = (bool)o;
				return m_ShowAutoNumber;
				
			}
			set
			{
				m_ShowAutoNumber = value;
				ViewState["__ShowAutoNumber"] = m_ShowAutoNumber;
				
				if(m_ShowAutoNumber)
					this.CustomColumnCreate();
				else
					this.CustomColumnRemove(CustomColumnClass.AutoNumberColumn);
			}
		}


		[Bindable(true),
		Category("Appearance"),
		DefaultValue(""),
		Description("是否显示选择列，如复选框列，或者单选框列。")]
		public bool ShowSelectControl
		{
			get
			{
				return m_ShowSelectColumn;
			}

			set
			{

				m_ShowSelectColumn = value;

				if(m_ShowSelectColumn)
					this.CustomColumnCreate();
				else
					this.CustomColumnRemove(CustomColumnClass.SelectColumn);
			}
		}

		[Bindable(true),
		Category("Appearance"),
		DefaultValue(""),
		Description("选择列的类型：复选框列、单选框列")]
		public SelectType ShowSelectType
		{
			get
			{
				return m_SelectType;
			}

			set
			{
				if(m_SelectType != value)
				{
					m_SelectType = value;

					this.CustomColumnRemove(CustomColumnClass.SelectColumn);
					this.CustomColumnCreate();
				}


			}
		}

		public new int PageCount
		{
			get{ return m_pageCount;}
			set{ m_pageCount = value;}
		}
		

		[Bindable(true),
		Category("Appearance"),
		Description("当无任何数据时，是否只显示该文本内容，而不是显示空数据的列头。"),
		DefaultValue("")]
		public bool ShowNoDataDispalyText
		{
			get
			{
				return m_ShowNoDataDispalyText;
			}

			set
			{
				m_ShowNoDataDispalyText = value;
			}
		}

		[Bindable(true),
		Category("Appearance"),
		Description("当无任何数据时，只显示该文本内容。"),
		DefaultValue("")]
		public string NoDataDispalyText
		{
			get
			{
				return m_NoDataDispalyText;
			}

			set
			{
				m_NoDataDispalyText = value;
			}
		}

		#endregion


		#region 函数及方法
		protected override void OnInit(EventArgs e)
		{
			base.OnInit (e);
			this.CustomColumnCreate();

		}

		/// <summary>
		/// 自定义列的创建
		/// </summary>
		private void CustomColumnCreate()
		{
			//防止重复列的产生
			for(int i=this.Columns.Count-1; i>=0; i--)
			{
				string aaa=this.Columns[i].GetType().ToString().Trim();
				if(this.Columns[i] is myAutoNumberColumn || this.Columns[i] is myCheckBoxColumn || this.Columns[i] is myRadioButtonColumn)
				{
					this.Columns.RemoveAt(i);
				}
			}

			//自动序号列

			if(this.ShowAutoNumber)
			{
				myAutoNumberColumn col  = new myAutoNumberColumn();
				this.Columns.AddAt(0,col);
			}

		

			//选择列
			if(this.ShowSelectType == SelectType.CheckBox)//复选
			{
				if(this.ShowSelectControl)
				{
					myCheckBoxColumn col = new myCheckBoxColumn();
					this.Columns.AddAt(0,col);
				
				}
			}
			else if(this.ShowSelectType == SelectType.RadioButton)//单选
			{
				if(this.ShowSelectControl)
				{
					myRadioButtonColumn col = new myRadioButtonColumn();
					this.Columns.AddAt(0,col);
				}
			}
		}

		/// <summary>
		/// 自定义列的移除
		/// </summary>
		/// <param name="columnClass">自定义列的类别</param>
		private void CustomColumnRemove(CustomColumnClass columnClass)
		{
//			for(int i=this.Columns.Count-1; i>=0; i--)
//			{
//				switch(columnClass)
//				{
//					case CustomColumnClass.AutoNumberColumn:
//						if(this.Columns[i] is myAutoNumberColumn)
//							this.Columns.RemoveAt(i);
//						break;
//					case CustomColumnClass.SelectColumn:
//						if(this.Columns[i] is myCheckBoxColumn || this.Columns[i] is myRadioButtonColumn)
//							this.Columns.RemoveAt(i);
//						break;
//				}
//			}
			
			//从0开始,找到用户列速度更快
			//将准备删除列的类别提到外面判断,减少算法复杂性
			if(columnClass==CustomColumnClass.AutoNumberColumn)
			{
				for(int i=0;i<this.Columns.Count; i++)
				{
					if(this.Columns[i] is myAutoNumberColumn)
					{
						this.Columns.RemoveAt(i);
						break;
					}
				}
			}
			else if(columnClass==CustomColumnClass.SelectColumn)
			{
				for(int i=0;i<this.Columns.Count; i++)
				{
					if(this.Columns[i] is myCheckBoxColumn || this.Columns[i] is myRadioButtonColumn)
					{
						this.Columns.RemoveAt(i);
						break;
					}
				}
			}

		}	

		//重载项建立时的函数
		protected override void OnItemCreated(DataGridItemEventArgs e)
		{
			base.OnItemCreated (e);

			if (e.Item.ItemType == ListItemType.Header)
			{
				//-----为CheckBox创建事件----------------------
				CheckBox cbH = (CheckBox)e.Item.FindControl("__cbAll");
				if(cbH != null)
				{
					cbH.CheckedChanged +=new EventHandler(cbAll_CheckedChanged);
				}
				//---------------------------------------------
			}
			else if(e.Item.ItemType==ListItemType.Item || e.Item.ItemType==ListItemType.AlternatingItem)
			{

				//-----自动序号产生-------------------------
				Label lbl = (Label)e.Item.FindControl("__lblAutoNumber");
				if(lbl!=null)
				{
					int iCurrentPage;
					object o1 = ViewState["__CurrentPage"];
					if(o1==null) 
						iCurrentPage = 1; 
					else 
						iCurrentPage = (int)o1;
					iCurrentPage--;
					lbl.Text = Convert.ToString(iCurrentPage*this.PageSize+e.Item.ItemIndex+1);
				}

				//------------------------------------------
				
				//-----为RadioButton创建事件-------------------
				RadioButton rbtn = (RadioButton)e.Item.FindControl("__rbtnSelect");
				if(rbtn != null)
				{
					rbtn.CheckedChanged +=new EventHandler(rbtnSelect_CheckedChanged);
				}
				//---------------------------------------------
				
				//-----为CheckBox创建事件----------------------
				CheckBox cbH = (CheckBox)e.Item.FindControl("__cbSelect");
				if(cbH != null)
				{
					cbH.CheckedChanged +=new EventHandler(cbSelect_CheckedChanged);
				}
				//---------------------------------------------

			}
			else if(e.Item.ItemType==ListItemType.Footer)
			{

				//-----分页导航-------------------------------------
				//1.合并多列为一列
				int nCount = e.Item.Cells.Count;
				for (int i=0; i < nCount-1; i++)
					e.Item.Cells.RemoveAt(0);

				e.Item.Cells[0].ColumnSpan = nCount;

				//2.加分页导航控制
				//给那个单元格 td 加一个样式，即：长的字符串能在td的宽度内自动折行，防止撑乱。(内部样式)
				e.Item.Cells[0].Style.Add("word-break","break-all");
				e.Item.Cells[0].Controls.Add(this.CreateNavigateArea());
				//------------------------------------------
			}
		}
		//标题全选状态事件
		private void cbAll_CheckedChanged(object sender, EventArgs e)
		{
			CheckBox cbAll = (CheckBox)sender;
			DataGrid dg = (DataGrid)((DataGridItem)cbAll.Parent.NamingContainer).Parent.NamingContainer;
			for(int i=0; i<dg.Items.Count; i++)
			{
				CheckBox cb = (CheckBox)dg.Items[i].FindControl("__cbSelect");
				if(cb != null && cb.Enabled)//该行CheckBox.Enabled=true,则受列头Checkbox控制
				{
					cb.Checked = cbAll.Checked;
				}
			}
			
			this.OnSelectedIndexChanged(EventArgs.Empty);
		}
		//每行复选的选择
		private void cbSelect_CheckedChanged(object sender, EventArgs e)
		{
			CheckBox cbSelect = (CheckBox)sender;
			DataGrid dg = (DataGrid)((DataGridItem)cbSelect.Parent.NamingContainer).Parent.NamingContainer;

			//所具有的子checkbox是否都选上了
			bool bSelectAll = false;
			int iSelect = 0;
			for(int i=0; i<dg.Items.Count; i++)
			{
				CheckBox cb = (CheckBox)dg.Items[i].FindControl("__cbSelect");
				if(cb != null && cb.Checked == true) iSelect++;
			}
			if(iSelect == dg.Items.Count) bSelectAll = true; else bSelectAll = false;
			

			//找到父checkbox，并check
			foreach(DataGridItem item in dg.Controls[0].Controls)
			{
				if(item.ItemType == ListItemType.Header)
				{
					CheckBox cbAll = (CheckBox)item.FindControl("__cbAll");
					if(cbAll != null)
						cbAll.Checked = bSelectAll;
				}
			}

			this.OnSelectedIndexChanged(EventArgs.Empty);
		}
		//每行单选的选择
		private void rbtnSelect_CheckedChanged(object sender, EventArgs e)
		{
			RadioButton rbtnSelect = (RadioButton)sender;
			DataGrid dg = (DataGrid)((DataGridItem)rbtnSelect.Parent.NamingContainer).Parent.NamingContainer;

			if(rbtnSelect.Checked)
			{
				for(int i=0; i<dg.Items.Count; i++)
				{
					RadioButton rbtn = (RadioButton)dg.Items[i].FindControl("__rbtnSelect");
					if(rbtn != null && rbtn.ClientID != rbtnSelect.ClientID) rbtn.Checked = false;
					
				}
			}

			this.SelectedIndex = ((DataGridItem)rbtnSelect.Parent.NamingContainer).ItemIndex;
			this.OnSelectedIndexChanged(EventArgs.Empty);
		}

		//向客户端输出HTML
		protected override void Render(HtmlTextWriter writer)
		{
			if(this.Items.Count < 1 && this.ShowNoDataDispalyText == true)
			{
				writer.WriteLine("<span id='"+this.UniqueID+"_span' style=\"Z-INDEX:"+this.Style["Z-INDEX"] +";POSITION:"+this.Style["POSITION"]+";TOP:"+this.Style["TOP"]+";LEFT:"+this.Style["LEFT"]+"\">"); //+";background-color:#FFFFFF;scrollbar-face-color:Lavender;scrollbar-highlight-color:#FFFFFF;scrollbar-shadow-color:#DEE3E7;scrollbar-3dlight-color:#D1D7DC;scrollbar-arrow-color:Black;scrollbar-track-color:#EFEFEF;scrollbar-darkshadow-color:#98AAB1;overflow:auto;border:1px groove #98AAB1;border-style:Ridge;height:"+this.ClientHeight+"px;width:"+this.ClientWidth+"px;\">");
				this.Style.Remove("POSITION");
				this.Style.Remove("TOP");
				this.Style.Remove("LEFT");
				this.Style.Remove("Z-INDEX");

				writer.WriteLine(this.NoDataDispalyText);

				writer.WriteLine("</span>");
			}
			else
			{
				base.Render (writer);
				
			}			

		}
		//建立分页栏
		private HtmlTable CreateNavigateArea()
		{
			HtmlTable table = new HtmlTable();
			table.CellPadding = 0;
			table.CellSpacing = 0;
			table.Width = "100%";
			table.Border = 0;
			
			HtmlTableRow tr = new HtmlTableRow();
			HtmlTableCell cell = new HtmlTableCell();
			cell.Align = "center";
			cell.Controls.Add(this.CreateLabel("","共"));
			Label lbl1 = new Label();
			lbl1.ID = "lblRecordCount";
			cell.Controls.Add(lbl1);
			Label lbl2 = new Label();
			lbl2.Text ="条记录，每页显";
			cell.Controls.Add(lbl2);
			Label lbl3 = new Label();
			lbl3.ID = "lblPageSize";
			cell.Controls.Add(lbl3);
			Label lbl4 = new Label();
			lbl4.Text ="条，分为";
			cell.Controls.Add(lbl4);
			Label lbl5 = new Label();
			lbl5.ID = "lblPageCount";
			cell.Controls.Add(lbl5);
			Label lbl6 = new Label();
			lbl6.Text ="页，当前第";
			cell.Controls.Add(lbl6);
			Label lbl7 = new Label();
			lbl7.ID = "lblCurrentPage";
			cell.Controls.Add(lbl7);
			Label lbl8 = new Label();
			lbl8.Text ="页";
			cell.Controls.Add(lbl8);
			cell.Controls.Add(this.CreateLabel("","&nbsp;&nbsp"));

			LinkButton lbtn1 = new LinkButton();
			lbtn1.ID = "lbtnPageFirst";
			lbtn1.Text = "首页";
			lbtn1.CommandName = "PageFirst";
			lbtn1.CausesValidation = false;
			lbtn1.Click +=new EventHandler(this.onPageNavigate_Click);
			cell.Controls.Add(lbtn1);
			cell.Controls.Add(this.CreateLabel("","&nbsp;"));

			LinkButton lbtn2 = new LinkButton();
			lbtn2.ID = "lbtnPagePrev";
			lbtn2.Text = "上页";
			lbtn2.CommandName = "PagePrev";
			lbtn2.CausesValidation = false;
			lbtn2.Click +=new EventHandler(onPageNavigate_Click);
			cell.Controls.Add(lbtn2);
			cell.Controls.Add(this.CreateLabel("","&nbsp;"));
			LinkButton lbtn3 = new LinkButton();
			lbtn3.ID = "lbtnPageNext";
			lbtn3.Text = "下页";
			lbtn3.CommandName = "PageNext";
			lbtn3.CausesValidation = false;
			lbtn3.Click +=new EventHandler(onPageNavigate_Click);
			cell.Controls.Add(lbtn3);
			cell.Controls.Add(this.CreateLabel("","&nbsp;"));
			LinkButton lbtn4 = new LinkButton();
			lbtn4.ID = "lbtnPageLast";
			lbtn4.Text = "末页";
			lbtn4.CommandName = "PageLast";
			lbtn4.CausesValidation = false;
			lbtn4.Click +=new EventHandler(onPageNavigate_Click);
			cell.Controls.Add(lbtn4);
			
			cell.Controls.Add(this.CreateLabel("","&nbsp;"));

			cell.Controls.Add(this.CreateLabel("","跳转到第"));
			TextBox txt = new TextBox();
			txt.ID = "txtPageGoTo";
			txt.Width = 39;
			txt.Style.Add("text-align","center");
			cell.Controls.Add(txt);
			cell.Controls.Add(this.CreateLabel("","页"));
			Button btn = new Button();
			btn.ID = "btnPageGoTo";
			btn.Text = "Go";
			btn.Width = 40;
			btn.CommandName = "PageGoTo";
			btn.CausesValidation = false;
			btn.Click +=new EventHandler(onPageNavigate_Click);
			cell.Controls.Add(btn);

			tr.Cells.Add(cell);
			table.Rows.Add(tr);
			return table;
		}

		//创建一个标签
		private Label CreateLabel(string id, string text)
		{
			Label lbl = new Label();
			if(id.Trim() != string.Empty)
				lbl.ID = id;
			if(text.Trim() != string.Empty)
				lbl.Text = text;
			return lbl;
		}

		/// <summary>
		/// 分页导航按钮点击事件
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		public void onPageNavigate_Click(object sender, EventArgs e)
		{
			int iCurrentPage, iPageCount;
						
			object o1 = ViewState["__CurrentPage"];
			if(o1==null) iCurrentPage = 1; else iCurrentPage = (int)o1;
			object o2 = ViewState["__PageCount"];
			if(o2==null) iPageCount = 0; else iPageCount = (int)o2;

			if(iCurrentPage < 0) iCurrentPage = 1;
			this.PageCount = iPageCount;

			if(sender is LinkButton)
			{
				string arg=((LinkButton)sender).CommandName.ToString().Trim().ToUpper();
				switch(arg)
				{
					case "PAGEFIRST" :
					{
						iCurrentPage = 1;
						break;
					}
					case "PAGEPREV" :
					{
						if(iCurrentPage > 0) 
							iCurrentPage -= 1;
						break;
					}
					case "PAGENEXT" :
					{
						if(iCurrentPage <= iPageCount-1 )
							iCurrentPage += 1;
						break;
					}
					case "PAGELAST" :
					{
						iCurrentPage = iPageCount;
						break;
					}
				}
			}
			else if(sender is Button)
			{
				string arg=((Button)sender).CommandName.ToString().Trim().ToUpper();
				if(arg == "PAGEGOTO")
				{
					int iPage = 0;
					bool b = this.GetPageGoToTextBoxValue(ref iPage);
					if(!b) return;
					if(iPage<=0 || iPage>iPageCount) return;

					iCurrentPage = iPage;
				}
			}
			

			ViewState["__CurrentPage"] = iCurrentPage;
			//			this.CurrentPageIndex = 0;
			DataGridPageChangedEventArgs page_change_args = new DataGridPageChangedEventArgs(this,iCurrentPage);
			this.OnPageIndexChanged(page_change_args);
			
		}
		//跳到用户指定的页
		public bool GetPageGoToTextBoxValue(ref int pageValue)
		{
			bool bResult = false;
			foreach (DataGridItem item in this.Controls[0].Controls)
			{
				if ( item.ItemType == ListItemType.Footer )
				{
					TextBox txt;
					txt = (TextBox)item.FindControl("txtPageGoTo");

					Utility.Validate objV = new Utility.Validate();
					string s = txt.Text.Trim();
					if(txt!=null && objV.IsInt(s))
					{
						pageValue = Convert.ToInt32(s);
						bResult = true;
					}
				} 
			}	 

			return bResult;
		}
		//显示分页信息及控制状态
		public void SetPageInfo(int recordCount, int currentPage)
		{
			this.CurrentPageIndex = currentPage;

			foreach (DataGridItem item in this.Controls[0].Controls)
			{
				if ( item.ItemType == ListItemType.Footer )
				{
					Label lblRecordCount;
					lblRecordCount = (Label)item.FindControl("lblRecordCount");
					Label lblPageCount;
					lblPageCount = (Label)item.FindControl("lblPageCount");
					Label lblPageSize;
					lblPageSize = (Label)item.FindControl("lblPageSize");
					Label lblCurrentPage;
					lblCurrentPage = (Label)item.FindControl("lblCurrentPage");
					Button btnPageGoTo;
					btnPageGoTo = (Button)item.FindControl("btnPageGoTo");
					TextBox txtPageGoTo;
					txtPageGoTo = (TextBox)item.FindControl("txtPageGoTo");
					LinkButton lbtnPageFirst;
					lbtnPageFirst = (LinkButton)item.FindControl("lbtnPageFirst");
					LinkButton lbtnPagePrev;
					lbtnPagePrev = (LinkButton)item.FindControl("lbtnPagePrev");
					LinkButton lbtnPageNext;
					lbtnPageNext = (LinkButton)item.FindControl("lbtnPageNext");
					LinkButton lbtnPageLast;
					lbtnPageLast = (LinkButton)item.FindControl("lbtnPageLast");

					if(lblRecordCount!=null && lblPageCount!=null && lblPageSize!=null && lblCurrentPage!=null 
						&& btnPageGoTo!=null && txtPageGoTo!=null
						&& lbtnPageFirst!=null && lbtnPagePrev!=null && lbtnPageNext!=null && lbtnPageLast!=null)
					{
						int iPageSize = this.PageSize;
						int iCurrentPage = currentPage;
						int iRecordCount = recordCount;
						int iPageCount = recordCount % iPageSize;
						if(iPageCount>0)//取得总页数
							iPageCount = recordCount / iPageSize + 1;
						else
							iPageCount = recordCount / iPageSize;
						ViewState["__PageCount"] = iPageCount;
						ViewState["__CurrentPage"] = iCurrentPage;
						
				

						//--- 取得分页信息 ---------------------------------------
						lblRecordCount.Text	= iRecordCount.ToString();
						lblPageCount.Text		= iPageCount.ToString();
						//				ViewState["PageCount"]		= iPageCount;//页总数
						lblPageSize.Text		= iPageSize.ToString();
						lblCurrentPage.Text	= iCurrentPage.ToString();
						//--------------------------------------------------------
			
						//--- 根据当前页的位置决定相关按钮的Enable属性 -----------------------
						if(iRecordCount<=0) 
						{
							btnPageGoTo.Enabled=false;//没有任何纪录的话，则页码跳转按钮不能用
							txtPageGoTo.Enabled=false;
						}
						else
						{
							btnPageGoTo.Enabled=true;
							txtPageGoTo.Enabled=true;
						}

						if(iPageCount>1)
						{
							if(iCurrentPage==1 )
							{
								lbtnPageFirst.Enabled=false;
								lbtnPagePrev.Enabled=false;
								lbtnPageNext.Enabled=true;
								lbtnPageLast.Enabled=true;
							}
							else if(iCurrentPage==iPageCount)
							{
								lbtnPageFirst.Enabled=true;
								lbtnPagePrev.Enabled=true;
								lbtnPageNext.Enabled=false;
								lbtnPageLast.Enabled=false;
							}
							else
							{
								lbtnPageFirst.Enabled=true;
								lbtnPagePrev.Enabled=true;
								lbtnPageNext.Enabled=true;
								lbtnPageLast.Enabled=true;
							}
						}
						else
						{
							//只有一页或没有任何数据
							lbtnPageFirst.Enabled=false;
							lbtnPagePrev.Enabled=false;
							lbtnPageNext.Enabled=false;
							lbtnPageLast.Enabled=false;
						}
						//------------------------------------------
					}


					break;
				}
			}


		}

		/// 得到被CheckBox选中的行数，如第1行、第3行、第4行被选中，则返回"1,3,4"。
		public ArrayList GetSelectRow()
		{
			ArrayList al = new ArrayList();
			for(int i=0; i<this.Items.Count; i++)
			{
				if(this.ShowSelectType == SelectType.CheckBox)
				{
					CheckBox cb = (CheckBox)this.Items[i].FindControl("__cbSelect");
					if(cb != null && cb.Checked == true)
						al.Add(i+1);
				}
				else if(this.ShowSelectType == SelectType.RadioButton)
				{
					RadioButton rbtn = (RadioButton)this.Items[i].FindControl("__rbtnSelect");
					if(rbtn != null && rbtn.Checked == true)
						al.Add(i+1);
				}
			}
			return al;
		}

		/// <summary>
		/// 得到所有选中行的指定列的文本内容
		/// </summary>
		/// <param name="cellIndex">列的序号（从左至右第几列）</param>
		/// <returns>指定列的文本内容</returns>
		public ArrayList GetSelectRowCellText(int cellIndex)
		{
			ArrayList al = new ArrayList();
			string sText = "";
			for(int i=0; i<this.Items.Count; i++)
			{
				if(this.ShowSelectType == SelectType.CheckBox)
				{
					CheckBox cb = (CheckBox)this.Items[i].FindControl("__cbSelect");
					if(cb != null && cb.Checked == true)
					{
						sText = this.Items[i].Cells[cellIndex].Text.Trim();
						al.Add(sText);
					}
				}
				else if(this.ShowSelectType == SelectType.RadioButton)
				{
					RadioButton rbtn = (RadioButton)this.Items[i].FindControl("__rbtnSelect");
					if(rbtn != null && rbtn.Checked == true)
					{
						sText = this.Items[i].Cells[cellIndex].Text.Trim();
						al.Add(sText);
					}
				}
			}
			return al;
		}


		/// <summary>
		/// 得到被选中行的总数
		/// </summary>
		/// <returns>被选中行的总数</returns>
		public int GetSelectCount()
		{
			int iCount = 0;
			foreach(DataGridItem item in this.Items)
			{
				if(this.ShowSelectType == SelectType.CheckBox)
				{
					CheckBox cb = (CheckBox)item.FindControl("__cbSelect");
					if(cb != null && cb.Checked == true)
						iCount++;
				}
				else if(this.ShowSelectType == SelectType.RadioButton)
				{
					RadioButton rbtn = (RadioButton)item.FindControl("__rbtnSelect");
					if(rbtn != null && rbtn.Checked == true)
						iCount++;
				}
			}
			return iCount;
		}

		/// <summary>
		/// 判断指定行是否选中了
		/// </summary>
		/// <param name="itemIndex"></param>
		/// <returns></returns>
		public bool ItemIsSelected(int itemIndex)
		{
			bool bResult = false;

			if(itemIndex < 0 || itemIndex > this.Items.Count)
				return false;

			if(this.ShowSelectType == SelectType.CheckBox)
			{
				CheckBox cb = (CheckBox)this.Items[itemIndex].FindControl("__cbSelect");
				if(cb != null)
					bResult = cb.Checked;
					
			}
			else if(this.ShowSelectType == SelectType.RadioButton)
			{
				RadioButton rbtn = (RadioButton)this.Items[itemIndex].FindControl("__rbtnSelect");
				if(rbtn != null)
					bResult = rbtn.Checked;
			}
			
			return bResult;

		}

		/// <summary>
		/// 设置指定行的复选框Checked值
		/// </summary>
		/// <param name="item"></param>
		/// <param name="checkedValue"></param>
		/// <returns></returns>
		public bool SetRowCheckValue(DataGridItem item, bool checkedValue)
		{
			bool bResult = false;
			try
			{
				if(this.ShowSelectType == SelectType.CheckBox)
				{
					int iiiii=this.Items.Count;
					//				CheckBox cb = (CheckBox)this.Items[itemIndex].FindControl("__cbSelect");
					CheckBox cb = (CheckBox)item.FindControl("__cbSelect");
					if(cb != null)
					{
						cb.Checked = checkedValue;
						bResult = true;
					}
				}
			}
			catch
			{
				bResult = false;
			}

			return bResult;
		}

		/// <summary>
		/// 设置指定行的复选框Checked值
		/// </summary>
		/// <param name="itemIndex"></param>
		/// <param name="checkedValue"></param>
		/// <returns></returns>
		public bool SetRowCheckValue(int itemIndex, bool checkedValue)
		{
			bool bResult = false;
			try
			{
				if(this.ShowSelectType == SelectType.CheckBox)
				{
					int iiiii=this.Items.Count;
					CheckBox cb = (CheckBox)this.Items[itemIndex].FindControl("__cbSelect");
			
					if(cb != null)
					{
						cb.Checked = checkedValue;
						bResult = true;
					}
				}
			}
			catch
			{
				bResult = false;
			}

			return bResult;
		}

		/// <summary>
		/// 设置指定行的复选框或单选框的Enable值
		/// </summary>
		/// <param name="item"></param>
		/// <param name="enableValue"></param>
		/// <returns></returns>
		public bool SetRowEnableValue(DataGridItem item, bool enableValue)
		{
			bool bResult = false;
			try
			{
				if(this.ShowSelectType == SelectType.CheckBox)
				{
					CheckBox cb = (CheckBox)item.FindControl("__cbSelect");
					if(cb != null)
					{
						cb.Enabled = enableValue;
					}
				}
				else if(this.ShowSelectType == SelectType.RadioButton)
				{
					RadioButton rbtn = (RadioButton)item.FindControl("__rbtnSelect");
					if(rbtn != null)
					{
						rbtn.Enabled = enableValue;
					}
				}
			}
			catch
			{
				bResult = false;
			}

			return bResult;
		}

		/// <summary>
		/// 设置指定行的复选框或单选框的Enable值
		/// </summary>
		/// <param name="itemIndex"></param>
		/// <param name="enableValue"></param>
		/// <returns></returns>
		public bool SetRowEnableValue(int itemIndex, bool enableValue)
		{
			bool bResult = false;
			try
			{
				if(this.ShowSelectType == SelectType.CheckBox)
				{
					CheckBox cb = (CheckBox)this.Items[itemIndex].FindControl("__cbSelect");
					if(cb != null)
					{
						cb.Enabled = enableValue;
					}
				}
				else if(this.ShowSelectType == SelectType.RadioButton)
				{
					RadioButton rbtn = (RadioButton)this.Items[itemIndex].FindControl("__rbtnSelect");
					if(rbtn != null)
					{
						rbtn.Enabled = enableValue;
					}
				}
			}
			catch
			{
				bResult = false;
			}

			return bResult;
		}

		
	}


	#endregion



	#region myCheckBoxColumn(复选框列类)
 
	public class myCheckBoxColumn : TemplateColumn 
	{

		public override void InitializeCell(TableCell cell, int columnIndex, ListItemType itemType)
		{
			base.InitializeCell (cell, columnIndex, itemType);

			if (itemType==ListItemType.Header)
			{
				CheckBox chk=new CheckBox();
				chk.ID = "__cbAll";
				
				Label l=new Label();
				chk.AutoPostBack = true;
				cell.Controls.Add(chk);
				cell.Controls.Add(l);
				cell.HorizontalAlign = HorizontalAlign.Center;
			}
			else if (itemType==ListItemType.Item || itemType==ListItemType.AlternatingItem || itemType==ListItemType.EditItem || itemType==ListItemType.SelectedItem)
			{
				CheckBox chk=new CheckBox();
				chk.ID = "__cbSelect";
				
				chk.AutoPostBack = true;

				cell.Controls.Add(chk);
				cell.HorizontalAlign = HorizontalAlign.Center;
			}
		}

	}
	#endregion

	#region myRadioButtonColumn(单选框列类)

	public class myRadioButtonColumn : TemplateColumn
	{
		public override void InitializeCell(TableCell cell, int columnIndex, ListItemType itemType)
		{
			base.InitializeCell (cell, columnIndex, itemType);

			if (itemType==ListItemType.Item || itemType==ListItemType.AlternatingItem || itemType==ListItemType.EditItem || itemType==ListItemType.SelectedItem)
			{
				RadioButton rbtn = new RadioButton();
				rbtn.ID = "__rbtnSelect";				
				rbtn.AutoPostBack = true;
				cell.Controls.Add(rbtn);
				cell.HorizontalAlign = HorizontalAlign.Center;
			}
		}
	
	}
	#endregion

	#region myAutoNumberColumn(自动序号列类)

	public class myAutoNumberColumn : TemplateColumn  
	{
		public override void InitializeCell(TableCell cell, int columnIndex, ListItemType itemType)
		{
			base.InitializeCell (cell, columnIndex, itemType);

			if (itemType==ListItemType.Header)
			{
				Label lbl = new Label();
				lbl.Text = "序号";

				cell.Controls.Add(lbl);
				cell.HorizontalAlign = HorizontalAlign.Center;
			}
			else if (itemType==ListItemType.Item || itemType==ListItemType.AlternatingItem || itemType==ListItemType.EditItem || itemType==ListItemType.SelectedItem)
			{

				Label lbl = new Label();
				lbl.ID = "__lblAutoNumber";

				cell.Controls.Add(lbl);
				cell.HorizontalAlign = HorizontalAlign.Center;
			}
		}
	}
	#endregion

}
