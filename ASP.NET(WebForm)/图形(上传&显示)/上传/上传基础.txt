进度的上传使用

1.组件HttpUploadModule.cs,Progress.cs

2.页面Default.* Progress.*


1.组件方面(HttpUploadModule.cs)
using System;
using System.Collections;
using System.Collections.Specialized;
using System.Globalization;
using System.IO;
using System.Text;
using System.Web;

using System.Reflection;

namespace Openlab.Web.Upload
{
	/// <summary>
	/// 给asp.net默认的上传组件加上进度条反映
	/// </summary>
	/// <Author>宝玉 (http://www.webuc.net)</Author>
	/// <Links>
	/// http://www.cnforums.net
	/// http://www.communtiyserver.cn
	/// http://blog.joycode.com
	/// </Links>
	public class HttpUploadModule: IHttpModule
	{
		public HttpUploadModule()
		{
			
		}

		public void Init(HttpApplication application)
		{
			application.BeginRequest += new EventHandler(this.Application_BeginRequest);
			application.EndRequest += new EventHandler(this.Application_EndRequest);
			application.Error += new EventHandler(this.Application_Error);
		}

		public void Dispose()
		{
		}

		private void Application_BeginRequest(Object sender, EventArgs e)
		{
			HttpApplication app = sender as HttpApplication;
			HttpWorkerRequest request = GetWorkerRequest(app.Context);
			Encoding encoding = app.Context.Request.ContentEncoding;

			int bytesRead = 0; // 已读数据大小
			int read; // 当前读取的块的大小
			int count = 8192; // 分块大小
			byte[] buffer; // 保存所有上传的数据
			string uploadId; // 唯一标志当前上传的ID
			Progress progress; // 记录当前上传的进度信息

			if (request != null)
			{
				// 返回 HTTP 请求正文已被读取的部分。
				//
				byte[] tempBuff = request.GetPreloadedEntityBody();
				
				// 如果是附件上传
				//
				if (
					tempBuff != null 
					&& IsUploadRequest(app.Request)
					)
				{
					// 获取上传大小
					// 
					long length = long.Parse(request.GetKnownRequestHeader(HttpWorkerRequest.HeaderContentLength));
					// 当前上传的ID，用来唯一标志当前的上传
					// 用此UploadID，可以通过其他页面获取当前上传的进度
					//
					uploadId = app.Context.Request.QueryString["UploadID"];
					
					// 开始记录当前上传状态
					//
					progress = new Progress(length, uploadId);
					progress.SetState(UploadState.ReceivingData);
					
					buffer = new byte[length];
					count = tempBuff.Length; // 分块大小

					// 将已上传数据复制过去
					//
					Buffer.BlockCopy(tempBuff, 0, buffer, bytesRead, count);

					// 开始记录已上传大小
					//
					bytesRead = tempBuff.Length;
					progress.SetBytesRead(bytesRead);
					SetProgress(uploadId, progress, app.Application);

					// 循环分块读取，直到所有数据读取结束
					//
					while (request.IsClientConnected() &&
						!request.IsEntireEntityBodyIsPreloaded() &&
						bytesRead < length
						)
					{
						// 如果最后一块大小小于分块大小，则重新分块
						//
						if (bytesRead + count > length)
						{
							count = (int)(length - bytesRead);
							tempBuff = new byte[count];
						}

						// 分块读取
						//
						read = request.ReadEntityBody(tempBuff, count);
						
						// 复制已读数据块
						//
						Buffer.BlockCopy(tempBuff, 0, buffer, bytesRead, read);
						
						// 记录已上传大小
						//
						bytesRead += read;
						progress.SetBytesRead(bytesRead);
						SetProgress(uploadId, progress, app.Application);

					}
					if (
						request.IsClientConnected() &&
						!request.IsEntireEntityBodyIsPreloaded()
						)
					{
				
						// 传入已上传完的数据
						//
						InjectTextParts(request, buffer);

						// 表示上传已结束
						//
						progress.SetBytesRead(bytesRead);
						progress.SetState(UploadState.Complete);
						SetProgress(uploadId, progress, app.Application);

					}
				}
			}
		}

		/// <summary>
		/// 结束请求后移除进度信息
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void Application_EndRequest(Object sender, EventArgs e)
		{
			HttpApplication app = sender as HttpApplication;

			if (IsUploadRequest(app.Request))
			{
				SetUploadState(app, UploadState.Complete);
				RemoveFrom(app);
			}

		}	

		/// <summary>
		/// 如果出错了设置进度信息中状态为“Error”
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void Application_Error(Object sender, EventArgs e)
		{
			HttpApplication app = sender as HttpApplication;

			if (IsUploadRequest(app.Request))
			{
				SetUploadState(app, UploadState.Error);
			}

		}

		/// <summary>
		/// 设置当前上传进度信息的状态
		/// </summary>
		/// <param name="app"></param>
		/// <param name="state"></param>
		void SetUploadState(HttpApplication app, UploadState state)
		{
			string uploadId = app.Request.QueryString["UploadID"];
			if (uploadId != null && uploadId.Length > 0)
			{
				Progress progress = GetProgress(uploadId, app.Application);
				if (progress != null)
				{
					progress.SetState(state);
					SetProgress(uploadId, progress, app.Application);
				}		
			}
		}

		/// <summary>
		/// 设置当前上传的进度信息
		/// 根据UploadID记录在Application中
		/// </summary>
		/// <param name="uploadId"></param>
		/// <param name="progress"></param>
		/// <param name="application"></param>
		void SetProgress(string uploadId, Progress progress, HttpApplicationState application)
		{
			if (uploadId == null || uploadId == string.Empty || progress == null)
				return;
			application.Lock();
			application["OpenlabUpload_" + uploadId] = progress;
			application.UnLock(); 
		}

		/// <summary>
		/// 从Application中移出进度信息
		/// </summary>
		/// <param name="app"></param>
		void RemoveFrom(HttpApplication app)
		{
			string uploadId = app.Request.QueryString["UploadID"];
			HttpApplicationState application = app.Application;
			if (uploadId != null && uploadId.Length > 0)
			{
				application.Remove("OpenlabUpload_" + uploadId);
			}
		}

		/// <summary>
		/// 根据UploadID获取上传进度信息
		/// </summary>
		/// <param name="uploadId"></param>
		/// <param name="application"></param>
		/// <returns></returns>
		public static Progress GetProgress(string uploadId, HttpApplicationState application)
		{
			Progress progress = application["OpenlabUpload_" + uploadId] as Progress;
			return progress;
		}

		HttpWorkerRequest GetWorkerRequest(HttpContext context)
		{

			IServiceProvider provider = (IServiceProvider)HttpContext.Current;
			return (HttpWorkerRequest)provider.GetService(typeof(HttpWorkerRequest));
		}

		/// <summary>
		/// 传入已上传完的数据
		/// </summary>
		/// <param name="request"></param>
		/// <param name="textParts"></param>
		void InjectTextParts(HttpWorkerRequest request, byte[] textParts)
		{
			BindingFlags bindingFlags = BindingFlags.Instance | BindingFlags.NonPublic; 
			
			Type type = request.GetType(); 
			
			while ((type != null) && (type.FullName != "System.Web.Hosting.ISAPIWorkerRequest"))
			{ 
				type = type.BaseType; 
			}

			if (type != null)
			{
				type.GetField("_contentAvailLength", bindingFlags).SetValue(request, textParts.Length); 
				type.GetField("_contentTotalLength", bindingFlags).SetValue(request, textParts.Length);
				type.GetField("_preloadedContent", bindingFlags).SetValue(request, textParts); 
				type.GetField("_preloadedContentRead", bindingFlags).SetValue(request, true);
			}
		}

		private static bool StringStartsWithAnotherIgnoreCase(string s1, string s2)
		{
			return (string.Compare(s1, 0, s2, 0, s2.Length, true, CultureInfo.InvariantCulture) == 0);
		}

		/// <summary>
		/// 是否为附件上传
		/// 判断的根据是ContentType中有无multipart/form-data
		/// </summary>
		/// <param name="request"></param>
		/// <returns></returns>
		bool IsUploadRequest(HttpRequest request)
		{
			return StringStartsWithAnotherIgnoreCase(request.ContentType, "multipart/form-data");
		}
	}
}

2.Progress.cs
using System;

namespace Openlab.Web.Upload
{
	/// <summary>
	/// 上传状态
	/// </summary>
	public enum UploadState
	{
		/// <summary>
		/// 正在接收数据
		/// </summary>
		ReceivingData,
		/// <summary>
		/// 已完成
		/// </summary>
		Complete,
		/// <summary>
		/// 上传错误.
		/// </summary>
		Error
	}

	/// <summary>
	/// 上传进度信息
	/// </summary>
	public class Progress
	{
		long contentLength = 0;
		long bytesRead;
		DateTime start;
		string uploadId = "";
		UploadState state;

		public Progress(long contentLength, string uploadId)
		{
			this.contentLength = contentLength;
			start = DateTime.Now;
			this.uploadId = uploadId;
		}

		public void SetBytesRead(long bytesRead)
		{
			lock (this)
			{
				this.bytesRead = bytesRead;
			}
		}


		public void SetState(UploadState state)
		{
			lock (this)
			{
				this.state = state;
			}
		}

		/// <summary>
		/// 总大小
		/// </summary>
		public long ContentLength
		{
			get
			{
				return contentLength;
			}
		}

		/// <summary>
		/// 已上传大小
		/// </summary>
		public long BytesRead
		{
			get
			{
				return bytesRead;
			}
		}
		
		/// <summary>
		/// 上传状态
		/// </summary>
		public UploadState State
		{
			get
			{
				return state;
			}
		}

		/// <summary>
		/// 上传开始时间
		/// </summary>
		public DateTime Start
		{
			get
			{
				return start;
			}
		}

		/// <summary>
		/// 唯一标志当前上传的UploadID
		/// </summary>
		string UploadId
		{
			get
			{
				return uploadId;
			}
		}
	}
}

3.使用页面Default.aspx
<%@ Page language="c#" Codebehind="Default.aspx.cs" AutoEventWireup="false" Inherits="Upload._Default" %>
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" >
<HTML>
	<HEAD>
		<title>Simple Upload Sample</title>
		<style>.progressBar {
	WIDTH: 250px; HEIGHT: 18px
}
.progressInfo {
	BORDER-RIGHT: #000000 1px solid; BORDER-TOP: #000000 1px solid; FONT-SIZE: 9pt; OVERFLOW: hidden; BORDER-LEFT: #000000 1px solid; WIDTH: 250px; PADDING-TOP: 1px; BORDER-BOTTOM: #000000 1px solid; POSITION: absolute; HEIGHT: 18px; TEXT-ALIGN: center
}
.progress {
	OVERFLOW: hidden; WIDTH: 0%; HEIGHT: 18px; BACKGROUND-COLOR: #5fff3f
}
</style>
		<script src="xmlLib.js"></script>
		<script>
		var r = "传输: {0}K 还未完成";
		var s = "您的文件已经上传完成";
		var t = "上传失败";
		function progressBar()
		{

			this.totalSize = 100;
			this.sizeCompleted = 0;
			this.percentDone = "0%";
			this.setSize = function(totalSize, size)
			{
				var oProgressInfo = document.getElementById("progressInfo");
				var oProgress = document.getElementById("progress");
				if (oProgress == null || oProgressInfo == null)
					return;

				if (totalSize <= 0)
					return;

				this.totalSize = totalSize;
				this.sizeCompleted = size;
				if (size < 0)
					this.sizeCompleted = 0;
				else if (size > this.totalSize)
					this.sizeCompleted = this.totalSize;

				var sizeLeft = 0;
				var progressInfoText = "";
				sizeLeft = this.totalSize - this.sizeCompleted;

				this.percentDone = Math.round(size / this.totalSize * 100) + "%";
				oProgress.style.width = this.percentDone;
				
				if (sizeLeft > 0)
					progressInfoText = r.replace("{0}", sizeLeft);
				else
					progressInfoText = s;

				oProgressInfo.innerHTML = progressInfoText;
			}
			this.UploadError = function()
			{
				var oProgressInfo = document.getElementById("progressInfo");
				var oProgress = document.getElementById("progress");
				if (oProgressInfo != null)
					oProgressInfo.innerHTML = t;
				if (oProgress != null)
					oProgress.style.width = "0";
			}
			this.UploadComplete = function()
			{
				var oProgressInfo = document.getElementById("progressInfo");
				var oProgress = document.getElementById("progress");
				if (oProgressInfo != null)
					oProgressInfo.innerHTML = s;
				if (oProgress != null)
					oProgress.style.width = "100%";
			}
		}
		var iTimerID = null;
		var xmlHttp = XmlHttpPool.pick();
		var url = "progress.aspx?UploadID=<%=Request.QueryString["UploadID"]%>"
		var pb = new progressBar();	
		function LoadProgressInfo()
		{
			try
			{
				xmlHttp.open("GET", url + "&t=" + Math.random(), true);
				xmlHttp.send(null);
				xmlHttp.onreadystatechange = function()
				{
					LoadData(xmlHttp);
				}
			}
			catch(e)
			{
				alert(e)
			}
		}

		function LoadData(xmlhttp)
		{
			if (xmlhttp.readyState == 4)
			{
				iTimerID = window.setTimeout("LoadProgressInfo()", 500); 
				try{
					eval(xmlhttp.responseText);
				}
				catch(e)
				{
					alert(e)
				}
			}
		}
		
		function ClearTimer()
		{
			if (iTimerID != null)
			{
				window.clearTimeout(iTimerID);
				iTimerID = null;
			}
		}
		
		function UploadCancel()
		{
			location.href = location.href;
		}

		</script>
	</HEAD>
	<body>
		<form method="post" target="uploadData" runat="server">
			<P><INPUT id="uploadFile" type="file" runat="server">
			</P>
			<div class="progressBar" id="progressBar">
				<div class="progressInfo" onselectstart="return false;" id="progressInfo"></div>
				<FONT face="宋体"></FONT>
				<div class="progress" id="progress"></div>
			</div>
			<P><asp:button id="btnUpload" runat="server" Text="  上传  "></asp:button>&nbsp;&nbsp;&nbsp;&nbsp;
				<INPUT id="btnUpload" onclick="UploadCancel()" type="button" value="  取消  ">
			</P>
			<iframe name="uploadData" src="about:blank"></iframe></form>
	</body>
</HTML>

4.Default.aspx.cs
using System;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.SessionState;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;

namespace Upload
{
	/// <summary>
	/// 上传测试页面
	/// </summary>
	public class _Default : System.Web.UI.Page
	{
		protected System.Web.UI.WebControls.Button btnUpload;
		protected System.Web.UI.HtmlControls.HtmlInputFile uploadFile;
	
		private void Page_Load(object sender, System.EventArgs e)
		{
			// 使用UploadID来唯一标识是当前的上传
			//
			if (Request.QueryString["UploadID"] == null)
				Response.Redirect("Default.aspx?UploadID=" + Guid.NewGuid().ToString());

			// 当提交的时候，开始加载进度条
			//
			btnUpload.Attributes.Add("onclick", "window.setTimeout('LoadProgressInfo()', 500)");
		}

		#region Web 窗体设计器生成的代码
		override protected void OnInit(EventArgs e)
		{
			//
			// CODEGEN: 该调用是 ASP.NET Web 窗体设计器所必需的。
			//
			InitializeComponent();
			base.OnInit(e);
		}
		
		/// <summary>
		/// 设计器支持所需的方法 - 不要使用代码编辑器修改
		/// 此方法的内容。
		/// </summary>
		private void InitializeComponent()
		{    
			this.btnUpload.Click += new System.EventHandler(this.btnUpload_Click);
			this.Load += new System.EventHandler(this.Page_Load);

		}
		#endregion


		private void uploadButton_ServerClick(object sender, System.EventArgs e)
		{
		}

		private void btnUpload_Click(object sender, System.EventArgs e)
		{
			// 后端处理方法和普通的上传是一样的
			//
			string filename = this.uploadFile.PostedFile.FileName;
			filename = filename.Substring(filename.LastIndexOf("\\"));
			string FullPath=Server.MapPath("") + filename;
			this.uploadFile.PostedFile.SaveAs(FullPath);
			Response.Write("上传文件：" + filename);
			
			// 上传完后使用脚本通知前端进度条
			//
			Response.Write("<script>parent.pb.UploadComplete();parent.ClearTimer();</script>");
			Response.End();
		}
	}
}
5.Progress.aspx
<%@ Page language="c#" Codebehind="Progress.aspx.cs" AutoEventWireup="false" Inherits="Upload.Progress" %>
6.Progress.aspx.cs
using System;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.SessionState;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using Openlab.Web.Upload;
namespace Upload
{
	/// <summary>
	/// 上传进度反映页面
	/// </summary>
	public class Progress : System.Web.UI.Page
	{

		private void Page_Load(object sender, System.EventArgs e)
		{
			string uploadId = Request.QueryString["UploadID"];
			string scriptText = "";
			string scriptUploading = "pb.setSize({0}, {1});";
			string scriptClearTimer = "ClearTimer();";
			string scriptUploadComplete = "pb.UploadComplete();" + scriptClearTimer;
			string scriptUploadError = "pb.UploadError();";

			string length = "";
			string read = "";

			Openlab.Web.Upload.Progress progress = HttpUploadModule.GetProgress(uploadId, Application);
			if (progress != null)
			{
				// 如果正在接收数据，利用脚本来通知前端进度条
				//
				if (progress.State == UploadState.ReceivingData)
				{
					length = (progress.ContentLength / 1024).ToString();
					read = (progress.BytesRead / 1024).ToString();
					scriptText = string.Format(scriptUploading, length, read);
				}
				else if(progress.State == UploadState.Complete)
				{
					scriptText = scriptUploadComplete;
				}
				else
				{
					scriptText = scriptUploadError;
				}
			}
			else
			{
				//scriptText = scriptUploadError;
			}
			Response.Clear();
			Response.Write(scriptText);
			Response.End();
		}

		#region Web 窗体设计器生成的代码
		override protected void OnInit(EventArgs e)
		{
			//
			// CODEGEN: 该调用是 ASP.NET Web 窗体设计器所必需的。
			//
			InitializeComponent();
			base.OnInit(e);
		}
		
		/// <summary>
		/// 设计器支持所需的方法 - 不要使用代码编辑器修改
		/// 此方法的内容。
		/// </summary>
		private void InitializeComponent()
		{    
			this.Load += new System.EventHandler(this.Page_Load);

		}
		#endregion
	}
}



