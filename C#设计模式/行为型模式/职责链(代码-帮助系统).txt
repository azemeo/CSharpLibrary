1.Chain.cs
using System;
using System.Windows.Forms;
namespace HelpChain
{
	public abstract class Chain	{
		//describes how all chains work
		private bool hasLink;
		protected Control control;
		protected Chain chn;
		protected string message;
		
		public Chain(Control c, string mesg)	{
			hasLink = false;
			control = c;		//save the control
			message = mesg;
		}
		
		public abstract void sendToChain();
		//-----
		public void addToChain(Chain c) {
			//add new element to chain
			chn = c;
			hasLink = true;		//flag existence
		}
		//-----
		public Chain getChain() {
			return chn;	//get the chain link
		}
		//-----
		public bool hasChain() {
			return hasLink;		//true if linked to another
		}
		//-----
		protected void sendChain() {
			//send message on down the chain
			if(chn != null)
				chn.sendToChain ();
		}
	}
}
2.ControlChain.cs
using System;
using System.Windows.Forms;
namespace HelpChain
{
	/// <summary>
	/// Summary description for ControlChain.
	/// </summary>
	public class ControlChain:Chain 	{
		public ControlChain(Control c, string mesg):base(c, mesg)		{
		}
		public override void sendToChain() {
			//if it has the focus display the message
			if (control.Focused ) {
				MessageBox.Show (message);
			}
			else
				//otherweise pass on down the chain
				sendChain();
		}
	}
}
3.EndChain.cs
using System;
using System.Windows.Forms;
namespace HelpChain
{
	/// <summary>
	/// Summary description for EndChain.
	/// </summary>
	public class EndChain:Chain 	{
		public EndChain(Control c, string mesg):base(c, mesg){}
		public override void sendToChain() {
			MessageBox.Show (message);
		}
	}
}
4.
using System;
using System.Drawing;
using System.Collections;
using System.ComponentModel;
using System.Windows.Forms;
using System.Data;

namespace HelpChain
{
	/// <summary>
	/// Summary description for Form1.
	/// </summary>
	public class Form1 : System.Windows.Forms.Form {
		private System.Windows.Forms.Button btNew;
		private System.Windows.Forms.Button btFile;
		private System.Windows.Forms.Button btQuit;
		private System.Windows.Forms.CheckBox ckBinary;
		private System.Windows.Forms.CheckBox ckText;
		/// <summary>
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.Container components = null;
		private Chain chn;

		public Form1()		{
			InitializeComponent();
			init();
		}
		private void init() {
			chn = new ControlChain(btNew, "Create new files");
			Chain fl =new ControlChain (btFile, "Select a file");
			chn.addToChain (fl);
			Chain bq = new ControlChain (btQuit, "Exit from program");
			fl.addToChain (bq);
			Chain cb =new ControlChain (ckBinary, "Use binary files");
			bq.addToChain (cb);
			Chain ct =  new ControlChain (ckText, "Use text files");
			cb.addToChain (ct);
			Chain ce = new EndChain (this, "General message");
			ct.addToChain (ce);
			KeyEventHandler keyev =  new KeyEventHandler(Form1_KeyDown);
			btNew.KeyDown += keyev;
			btFile.KeyDown += keyev;
			btQuit.KeyDown += keyev;
			ckBinary.KeyDown += keyev;
			ckText.KeyDown += keyev;
		}
[STAThread]
		static void Main() {
			Application.Run(new Form1());
		}

		private void Form1_KeyDown(object sender, KeyEventArgs e) {
			if(e.KeyCode  == Keys.F1 )
				chn.sendToChain ();
		}

		private void btQuit_Click(object sender, System.EventArgs e) {
			this.Dispose();
		}
	}
}



