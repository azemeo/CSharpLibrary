适配器模式(Adapter Pattern):将一个类将一种接口转换成另一种接口。
桥接模式(Bridge Pattern):类的接口和它的实现相分离，无需改变调用者的代码即可替代实现的过程。
组成模式(Composite Pattern):组合就是对象的结合。可以构建部分-整体的关系或数据的树形关系。
装饰模式(Decorator Pattern):用一个类包装给定的类改变单个对象的行为，但不需要创建一个新的派生类。
外观模式(Facde Pattern):可以将一系统复杂的类包装成一个简单的封闭接口。
享元模式(Flyweight Pattern):通过共享（把参数移动外部）大幅地减少单个实例的数目。
代理模式(Proxy Pattern):为一个复杂的对象提供一个简单的占位对象。