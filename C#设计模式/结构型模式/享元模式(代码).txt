1.工厂FolderFactory.cs
using System;
using System.Drawing ;
namespace Flyweight
{
	/// <summary>
	/// 文件夹工厂.
	/// </summary>
	public class FolderFactory	{
		private Folder selFolder, unselFolder;//选中和未选中
		//-----
		public FolderFactory() 		{
			//create the two folders
			selFolder = new Folder(Color.Brown);//暗红
			unselFolder = new Folder(Color.Bisque);//浅黄
		}
		//-----根据参数得到指定种类的文件夹
		public Folder getFolder(bool selected) {
			if(selected)
				return selFolder;
			else
				return unselFolder;
		}
	}
}

2.矩形Rectangle.cs
using System;

namespace csPatterns {
		//放在一个新名称空间中，保证不会与System.Drawing中的冲突
		//矩形类:检查文件夹是否包含鼠标
		public class Rectangle 	{
		private int x1, x2, y1, y2;//左上角和右下角从标
		private int w, h;//宽和高
		public Rectangle() 		{			}
		//-----
		public void init(int x, int y) {
			x1 = x;
			y1 = y;
			x2 = x1 + w;
			y2 = y1 + h;
		}
		//-----
		public void setSize(int w_, int h_) {
			w = w_;
			h = h_;
		}
		//-----是否包含指定的点
		public bool contains(int xp, int yp) {
			return (x1 <= xp) && (xp <= x2) && 
					(y1 <= yp) && (yp <= y2);
		}
	}
}

3.文件夹Folder.cs
using System;
using System.Drawing ;
namespace Flyweight
{
	/// <summary>
	/// 文件夹类：
	/// </summary>
	public class Folder 	{
		//Draws a folder at the specified coordinates
		private const int w  = 50;
		private const int h = 30;
		//画笔
		private Pen blackPen, whitePen;
	    private Pen grayPen;																		
		//画刷
		private SolidBrush backBrush, blackBrush;
		//字体
		private Font fnt;
		//------指定背景颜色
		public Folder(Color col) 		{
			backBrush = new SolidBrush(col);//背景刷
			blackBrush = new SolidBrush(Color.Black);
			blackPen = new Pen(Color.Black);
			whitePen = new Pen(Color.White);
			grayPen = new Pen(Color.Gray);
			fnt = new Font("Arial", 12);
		}
		//-----在指定的位置绘制文件夹
		public void draw(Graphics g, int x, int y, string title) {
			//文件夹主体
			g.FillRectangle(backBrush, x, y, w, h);
			g.DrawRectangle(blackPen, x, y, w, h);
			//左侧,上侧白线(3D效果)
			g.DrawLine(whitePen, x + 1, y + 1, x + w - 1, y + 1);
			g.DrawLine(whitePen, x + 1, y, x + 1, y + h);
			//文件夹顶部小耳朵
		    g.DrawRectangle(blackPen, x + 5, y - 5, 15, 5);
			g.FillRectangle(backBrush, x + 6, y - 4, 13, 6);
			//右侧,下侧灰线线(3D效果)
			g.DrawLine(grayPen, x, y + h - 1, x + w, y + h - 1);
			g.DrawLine(grayPen, x + w - 1, y, x + w - 1, y + h - 1);
			//输出字符串
			g.DrawString(title, fnt, blackBrush, x, y + h + 5);
		}
	}
}
4.位置
using System;

namespace Flyweight
{
	/// <summary>
	/// 计算文件夹的位置.
	/// </summary>
	public class Positioner 	{
		private const int pLeft = 30;
		private const int pTop  = 30;
		private const int HSpace = 70;//水平间距
		private const int VSpace = 80;
		private const int rowMax = 2;//每行最大的列数-1
		private int x, y, cnt;//当前左上角的从标，及个数
		//-----
		public Positioner()	{
			reset();
		}
		//-----到初始状态
		public void reset() {
			x = pLeft;
			y = pTop;
			cnt = 0;
		}
		//-----
		public int nextX() {
			return x;
		}
		//-----递增
		public void incr() {
			cnt++;
			if (cnt > rowMax) {	//reset to start new row
				cnt = 0;
				x = pLeft;
				y += VSpace;
			}
			else {
				x += HSpace;
			}	
		}
		//-----
		public int nextY() {
			return y;
		}
	}
}

5.调用代码
using System;
using System.Drawing;
using System.Collections;
using System.ComponentModel;
using System.Windows.Forms;
using System.Data;

namespace Flyweight {
	/// <summary>
	/// Summary description for Form1.
	/// </summary>
	public class Form1 : System.Windows.Forms.Form {
		private System.Windows.Forms.PictureBox Pic;
		/// <summary>
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.Container components = null;
		private ArrayList names;//名称
		private Folder fol;
		private const int pLeft = 30;
		private const int pTop  = 30;
		private const int HSpace = 70;
		private const int VSpace = 80;
		private const int rowMax = 2;
		private string selectedName;
		private csPatterns.Rectangle rect;//矩形
		private FolderFactory folFact;//工厂
		private Positioner posn;//位置
		//-----初始化
		private void init() {
			names = new ArrayList();
			names.Add("Adam");
			names.Add("Bill");
			names.Add("Charlie");
			names.Add("Dave");
			names.Add("Edward");
			names.Add("Fred");
			names.Add("George");
			fol = new Folder(Color.Bisque);//浅黄色文件夹
			selectedName = (string)names[0];//第一名称
			Pic.Paint += new PaintEventHandler (picPaint);
			rect = new csPatterns.Rectangle();//矩形
			rect.setSize(50, 30);
			folFact = new FolderFactory();
			posn = new Positioner ();
		}
//-----
		public Form1() {
			InitializeComponent();
			init();
		}
		//-----------
		private void picPaint(object sender,  PaintEventArgs e ) {
			Graphics g = e.Graphics;
			posn.reset ();
			for(int i = 0; i < names.Count; i++)
			{
				//比较当前选中的名称决定返回哪个实例
				fol = folFact.getFolder(selectedName.Equals((string)names[i]));
				//画文件夹(得到从标)
				fol.draw(g,posn.nextX(),posn.nextY(),(string)names[i]);
				posn.incr();//递增
			}										   
		}
		//-----
		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		protected override void Dispose( bool disposing ) {
			if( disposing ) {
				if (components != null) {
					components.Dispose();
				}
			}
			base.Dispose( disposing );
		}

		#region Windows Form Designer generated code
		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void InitializeComponent() {
			this.Pic = new System.Windows.Forms.PictureBox();
			this.SuspendLayout();
			// 
			// Pic
			// 
			this.Pic.BorderStyle = System.Windows.Forms.BorderStyle.Fixed3D;
			this.Pic.Location = new System.Drawing.Point(8, 8);
			this.Pic.Name = "Pic";
			this.Pic.Size = new System.Drawing.Size(272, 248);
			this.Pic.TabIndex = 0;
			this.Pic.TabStop = false;
			this.Pic.MouseMove += new System.Windows.Forms.MouseEventHandler(this.Pic_MouseMove);
			// 
			// Form1
			// 
			this.AutoScaleBaseSize = new System.Drawing.Size(5, 13);
			this.ClientSize = new System.Drawing.Size(292, 273);
			this.Controls.AddRange(new System.Windows.Forms.Control[] {
																		  this.Pic});
			this.Name = "Form1";
			this.Text = "Flyweight demo";
			this.ResumeLayout(false);

		}
		#endregion

		/// <summary>
		/// The main entry point for the application.
		/// </summary>
		[STAThread]
		static void Main() {
			Application.Run(new Form1());
		}
//-----
		private void Pic_MouseMove(object sender, MouseEventArgs e) {
			string oldname = selectedName;  //save old name
			bool found = false;
			posn.reset ();
			int i = 0;
			selectedName = "";
			while (i < names.Count && ! found) {
				rect.init (posn.nextX() , posn.nextY ());
				//see if a rectangle contains the mouse
				if (rect.contains(e.X, e.Y) ){
					selectedName = (string)names[i];
					found = true;
				}		
				posn.incr ();
				i++;
			}
			//only refresh if mouse in new rectangle
			if(!oldname.Equals (selectedName)) {
				Pic.Refresh();//重画
			}
		}
	}
}